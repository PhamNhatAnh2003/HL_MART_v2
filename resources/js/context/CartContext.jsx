import { useAuth } from "~/hooks/useAuth";
import { createContext, useContext, useState, useEffect } from "react";
import axios from "axios";

// 1Ô∏è‚É£ T·∫°o context gi·ªè h√†ng
const CartContext = createContext();

// 2Ô∏è‚É£ Provider ƒë·ªÉ b·ªçc to√†n b·ªô ·ª©ng d·ª•ng
const CartProvider = ({ children }) => {
    const { user } = useAuth(); // üî• L·∫•y user t·ª´ AuthContext
    const [cart, setCart] = useState([]); // Tr·∫°ng th√°i gi·ªè h√†ng
    const [loading, setLoading] = useState(false); // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu

    // 3Ô∏è‚É£ Fetch gi·ªè h√†ng khi user thay ƒë·ªïi
    useEffect(() => {
        if (user?.id) {
            fetchCart();
        } else {
            setCart([]); // N·∫øu user logout, x√≥a gi·ªè h√†ng
        }
    }, [user?.id]);

    // 4Ô∏è‚É£ H√†m l·∫•y gi·ªè h√†ng t·ª´ server
    const fetchCart = async () => {
        if (!user?.id) return;
        setLoading(true);
        try {
            const response = await axios.get(`/api/cart/${user.id}`);
            setCart(response.data);
        } catch (error) {
            console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        } finally {
            setLoading(false);
        }
    };

    // 5Ô∏è‚É£ Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
    const addToCart = async (product) => {
        if (!user?.id) {
            alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
            return;
        }
       try {
           const response = await axios.post("/api/cart", {
               user_id: user.id,
               product_id: product.id,
               unit: product.unit,
               quantity: 1,
               price_at_time: product.price,
           });
           console.log("Cart response:", response.data); // üî• Debug ph·∫£n h·ªìi t·ª´ API
        //    console.log("Product unit:", product.unit);
           setCart(response.data);
       } catch (error) {
           console.error("L·ªói khi th√™m s·∫£n ph·∫©m:", error);
       }
    };

    // 6Ô∏è‚É£ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
    const updateQuantity = async (productId, quantity) => {
        if (!user?.id) return;
        if (quantity < 1) {
            removeFromCart(productId);
            return;
        }
        try {
            const response = await axios.put(`/api/cart/${productId}`, {
                user_id: user.id,
                quantity,
            });
            setCart(response.data);
        } catch (error) {
            console.error("L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error);
        }
    };

    // 7Ô∏è‚É£ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
    const removeFromCart = async (productId) => {
        if (!user?.id) return;
        try {
            await axios.delete(`/api/cart/${productId}`, {
                data: { user_id: user.id },
            });
            setCart(cart.filter((item) => item.product_id !== productId));
        } catch (error) {
            console.error("L·ªói khi x√≥a s·∫£n ph·∫©m:", error);
        }
    };

    // 8Ô∏è‚É£ X√≥a to√†n b·ªô gi·ªè h√†ng
    const clearCart = async () => {
        if (!user?.id) return;
        try {
            await axios.delete("/api/cart/clear", {
                data: { user_id: user.id },
            });
            setCart([]);
        } catch (error) {
            console.error("L·ªói khi x√≥a gi·ªè h√†ng:", error);
        }
    };

    return (
        <CartContext.Provider
            value={{
                cart,
                loading,
                addToCart,
                updateQuantity,
                removeFromCart,
                clearCart,
            }}
        >
            {children}
        </CartContext.Provider>
    );
};

export {CartContext, CartProvider}
